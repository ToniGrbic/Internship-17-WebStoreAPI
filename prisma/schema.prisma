// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Rating{
  id Int @id @default(autoincrement())
  rating Float
  count Int
  product Product?
}

model Product{
  id Int @id @default(autoincrement())
  title String @unique
  description String?
  image String? 
  price Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ratingId Int @unique
  rating Rating @relation(fields: [ratingId], references: [id]) 
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
  cart Cart[]
  orders Order[]
}

model Cart {
  id Int @id @default(autoincrement())
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  productId Int
  products Product[]
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  productId Int
  products Product[]
  quantity Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  name String
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores Store[]
  orders Order[]
  cart Cart?
}

model Store{
  id Int @id @default(autoincrement())
  name String @unique
  image String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
  users User[]
}




  
